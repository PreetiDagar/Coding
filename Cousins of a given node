class Solution
{
    public:
    vector<int> printCousins(Node* root, Node* node_to_find)
    {
        if (root == node_to_find) {
            vector<int> res = {-1};
            return res;
        }
        
        pair<Node*, int> location = findNode(root, node_to_find, 1);
        
        vector<int> res;
        findCousins(root, location.first, location.second, 1, res);
        
        if (res.size() == 0)
            res.push_back(-1);
            
        return res;
    }
    
    pair<Node*, int> findNode(Node *root, Node* node_to_find, int height) {
        if (root->left) {
            if (root->left == node_to_find) 
                return make_pair(root, height);
            
            pair<Node*, int> res = findNode(root->left, node_to_find, height + 1);
            if (res.first)
                return res;
        }
        
        if (root->right) {
            if (root->right == node_to_find)
                return make_pair(root, height);
            
            pair<Node*, int> res = findNode(root->right, node_to_find, height + 1);
            if (res.first)
                return res;
        }
        
        pair<Node*, int> res = {NULL, -1};
        return res;
    }
    
    void findCousins(Node* root, Node* par, int depth, int height, vector<int> &res) {
        if (!root || root == par) {
            return;
        } else if (depth == height) {
            if (root->left)
                res.push_back(root->left->data);
            if (root->right)
                res.push_back(root->right->data);
        } else {
            findCousins(root->left, par, depth, height + 1, res);
            findCousins(root->right, par, depth, height + 1, res);
        }
    }
};
